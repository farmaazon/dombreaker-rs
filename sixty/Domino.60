import { Position } from "./Models.60";

export struct DotInfo := {
    row: int,
    col: int,
    value: int,
    is-horizontal: bool,
}

export global DominoInfo := {
    property<length> tile-size: 80px;
    property<length> margin: 8px;
    property<length> dot-size: 16px;
    property<length> inner-size: tile-size - 2*margin;
    property<length> dot-spacing: (inner-size - dot-size*3)/2;

    callback is_dot_visible(DotInfo) -> bool;
}

DominoHalf := Rectangle {
    property<int> value;
    property<bool> is-horizontal;

    width: DominoInfo.tile-size;
    height: DominoInfo.tile-size;

    VerticalLayout {
        padding: DominoInfo.margin;
        spacing: DominoInfo.dot-spacing;

        for row in 3: HorizontalLayout {
            property<int> dot_row: row;
            spacing: DominoInfo.dot-spacing;

            for col in 3: Rectangle {
                property <bool> shown: DominoInfo.is_dot_visible({
                    row: parent.dot_row,
                    col: col,
                    value: root.value,
                    is-horizontal: root.is-horizontal,
                });

                max-width: DominoInfo.dot-size;
                max-height: DominoInfo.dot-size;

                if shown: Rectangle {
                    border-radius: width/2.0;
                    background: black;
                }
            }
        }
    }
}

export DominoBackground := Rectangle {
    property<Position> board-position;
    property<bool> is-horizontal: false;

    callback clicked <=> touch.clicked;

    x: board-position.x * DominoInfo.tile-size;
    y: board-position.y * DominoInfo.tile-size;
    border-color: green;
    border-width: 4px;
    background: red;

    width : (is-horizontal ? 2 : 1) * DominoInfo.tile-size;
    height: (is-horizontal ? 1 : 2) * DominoInfo.tile-size;

    touch := TouchArea {}
}

export Domino := DominoBackground {
    property<int> head-value;
    property<int> tail-value;

    head := DominoHalf {
        value: root.head-value;
        is-horizontal: root.is-horizontal;
    }

    separator := Rectangle {
        background: darkred;
    }

    tail := DominoHalf {
        value: root.tail-value;
        is-horizontal: root.is-horizontal;
    }

    states [
        horizontal when is-horizontal: {
            separator.x: DominoInfo.tile-size - separator.width / 2;
            separator.y: DominoInfo.margin;
            separator.width: 2px;
            separator.height: DominoInfo.inner-size;
            tail.x: DominoInfo.tile-size;
            tail.y: 0px;
        }

        vertical when !is-horizontal: {
            separator.x: DominoInfo.margin;
            separator.y: DominoInfo.tile-size - separator.height / 2;
            separator.width: DominoInfo.inner-size;
            separator.height: 2px;
            tail.x: 0px;
            tail.y: DominoInfo.tile-size;
        }
    ]
}